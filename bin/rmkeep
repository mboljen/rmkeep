#!/usr/bin/env bash
#
# Created:         Mi 2021-01-06 17:47:34 CET
# Last Modified:   So 2024-06-23 18:52:14 CEST
#
# rmkeep:
#   Keep a number of files matching a certain pattern and remove the rest

# Help text
usage() {
cat << EOF
Keep a number of files matching a certain pattern and remove the rest

Usage: rmkeep [OPTION]... PATTERN

Options:
   -p PATH    change directory (default: current working directory)
   -k NUMBER  files to keep (default: 0 = all)
   -r         reverse sort
   -n         dry run
   -h         show this help message
EOF
}

#
set -e

# Initialization
DIR=$(pwd)
KEEP=0
REVERSE=
DRYRUN=0

# Process options
while getopts "p:k:nrh" OPTION
do
    case "$OPTION"
    in
        p)  DIR="$OPTARG"
            ;;
        k)  KEEP="$OPTARG"
            ;;
        n)  DRYRUN=1
            ;;
        r)  REVERSE='--reverse'
            ;;
        h|\?)  usage
            exit 0
            ;;
    esac
done

# Welcome message
#echo
#printf "This is RMKEEP, keep and remove filenames matching a regex pattern\n"
#printf "Last modified 2024/06/19\n\n"

# Check number of files to keep
if [ "$KEEP" -lt 0 ]
then
    echo "Invalid number of files"
    usage
    exit 1
fi

# Check if directory exists
if [ ! -d "$DIR" ]
then
    echo "Cannot change to $DIR"
    usage
    exit 1
fi

# Skip options and shift index
shift $((OPTIND-1))

# Check number of parameters
if [ $# -gt 1 ]
then
    echo "Invalid number of parameters"
    usage
    exit 1
elif [ $# -eq 1 ]
then
    # Get argument
    REGEX=$1
else
    # No regex
    REGEX=
fi

# Change to working directory
cd "$DIR"

# Create temporary file
TEMPNAME=$(mktemp -t "$(basename "$0")-XXXXXX")

# Find files matching pattern
for f in $(find . -maxdepth 1 -type f | sort $REVERSE)
do
    fname=$(basename "$f")
    if [ -z "$REGEX" ] || [[ $fname =~ $REGEX ]]
    then
        echo "$fname" >> "$TEMPNAME"
    fi
done

# Removing files exceeding limit
if [ "$KEEP" -gt 0 ]
then
    # Get number of matches
    lines=$(awk 'END { print NR }' "$TEMPNAME")
    # Init counters
    kbyte=0
    num=0
    # Loop over deprecated files
    while read -r fname
    do
        # Get file size
        fsize=$(du -k "$fname" | cut -f 1)
        # Increment counters
        ((num+=1))
        ((kbyte+=fsize))
        # Physically remove file
        echo -n "Removing $fname ... "
        if [ "$DRYRUN" -eq 1 ]
        then
            echo "(DRYRUN)"
        else
            rm -f "$fname"
            echo "done"
        fi
    done < <(tail -n +$((KEEP+1)) "$TEMPNAME")
    # Print summary
    [ "$num" -gt 0 ] && echo
    if [ "$DRYRUN" -eq 1 ]
    then
        echo -e "$num/$lines files marked for deletion ($kbyte kB)"
    else
        echo -e "$num/$lines files removed ($kbyte kB)"
    fi
else
    cat "$TEMPNAME"
fi

# Remove temporary file
rm -f "$TEMPNAME"
